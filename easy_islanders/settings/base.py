"""
Django settings for easy_islanders project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-^8j$q^-8r2s=1)&etjdrk%441b*r0f@urp(_9@&14409_1=luy')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',

    # Local apps - users must come before assistant
    'users',
    'listings',
    'assistant',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'assistant.monitoring.otel_instrumentation.RequestIDMiddleware',
    'assistant.monitoring.middleware.OpenTelemetryMiddleware',  # OpenTelemetry tracing
    'assistant.monitoring.middleware.MetricsMiddleware',  # Additional metrics
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'easy_islanders.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'easy_islanders.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use dj_database_url for environment-based configuration
# This supports DATABASE_URL env var from Docker or local .env file
import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',  # Use SQLite for local development
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Media (for uploaded/listing images)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model (Phase 0 - Authentication)
AUTH_USER_MODEL = 'users.User'

# REST Framework & JWT Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': __import__('datetime').timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': __import__('datetime').timedelta(days=30),
    'ALGORITHM': 'HS256',
}

# âœ… CORS Configuration for credentials support
# When using withCredentials: true on frontend, cannot use wildcard '*'
# Must specify exact allowed origins
CORS_ALLOW_ALL_ORIGINS = False

# Base dev-friendly CORS origins
_default_cors = {
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
}

# Optionally extend via env (comma-separated)
_cors_env = {o.strip() for o in config('CORS_ALLOWED_ORIGINS', default='').split(',') if o.strip()}
CORS_ALLOWED_ORIGINS = sorted(_default_cors.union(_cors_env))
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'authorization',
]

# CSRF trusted origins (needed if using session auth or admin from a different host)
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# --- DECOUPLE AND AI CONFIGURATION ---
# This part is crucial for reading the .env file

# AI ASSISTANT CONFIGURATION
# The config() function reads the value from your .env file
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')

# Enhanced Agent Context - Feature Flag (default: disabled for safety)
ENABLE_AGENT_CONTEXT = config('ENABLE_AGENT_CONTEXT', default='false').lower() == 'true'

# Redis Configuration
REDIS_URL = config('REDIS_URL', default='redis://127.0.0.1:6379/0')

# Cache configuration with optional Redis
USE_REDIS_CACHE = config('USE_REDIS_CACHE', default=False, cast=bool)

if USE_REDIS_CACHE:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # Swallow redis errors as cache misses instead of crashing requests
                "IGNORE_EXCEPTIONS": True,
            },
            "TIMEOUT": 300,
        }
    }
else:
    # Development-friendly in-memory cache
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "easy_islanders_local_cache",
            "TIMEOUT": 300,
        }
    }

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=REDIS_URL)
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=REDIS_URL)
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TIME_LIMIT = 60
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True
OPENAI_MODEL = config('OPENAI_MODEL', default='gpt-4-turbo-preview')

# Proactive Agent Configuration
PROACTIVE_AGENT_ENABLED = config('PROACTIVE_AGENT_ENABLED', default=False, cast=bool)
ENABLE_PROACTIVE_PHOTOS = config('ENABLE_PROACTIVE_PHOTOS', default=False, cast=bool)
ENABLE_PROACTIVE_REMINDERS = config('ENABLE_PROACTIVE_REMINDERS', default=False, cast=bool)
ENABLE_PROACTIVE_QUESTIONS = config('ENABLE_PROACTIVE_QUESTIONS', default=False, cast=bool)
ENABLE_PROACTIVE_PREDICTIONS = config('ENABLE_PROACTIVE_PREDICTIONS', default=False, cast=bool)

# Auto-Response Configuration
ENABLE_AUTO_RESPONSE = config('ENABLE_AUTO_RESPONSE', default=False, cast=bool)

# LangGraph Agent Configuration (Phase A: Safe Rollout)
ENABLE_LANGGRAPH_AGENT = config('ENABLE_LANGGRAPH_AGENT', default=False, cast=bool)

# Central Supervisor Agent (Hierarchical Router)
ENABLE_SUPERVISOR_AGENT = config('ENABLE_SUPERVISOR_AGENT', default=False, cast=bool)
SUPERVISOR_ROUTER_MODEL = config('SUPERVISOR_ROUTER_MODEL', default='gpt-4o-mini')

# LangGraph Checkpointing Configuration (Phase A: In-memory with MemorySaver)
# Phase B will upgrade to PostgreSQL when needed (> 50 concurrent users)
LANGGRAPH_CHECKPOINT_CONNECTION_STRING = config(
    'LANGGRAPH_CHECKPOINT_CONNECTION_STRING',
    default='sqlite:///langgraph_checkpoints.db'
)

MAX_PROACTIVE_MESSAGES_PER_DAY = config('MAX_PROACTIVE_MESSAGES_PER_DAY', default=3, cast=int)
PROACTIVE_RATE_LIMIT_WINDOW = config('PROACTIVE_RATE_LIMIT_WINDOW', default=3600, cast=int)  # 1 hour

# End Celery config

# Enterprise Multi-Domain Agent Configuration (Phase B: Production Ready)
ENABLE_ENTERPRISE_AGENT = config('ENABLE_ENTERPRISE_AGENT', default=True, cast=bool)

# Registry Service Configuration
REGISTRY_BASE_URL = config('REGISTRY_BASE_URL', default='http://localhost:8081')
REGISTRY_API_KEY = config('REGISTRY_API_KEY', default='dev-key')

# OpenTelemetry Configuration
OTEL_EXPORTER_OTLP_ENDPOINT = config('OTEL_EXPORTER_OTLP_ENDPOINT', default='http://localhost:4317')
OTEL_SERVICE_NAME = config('OTEL_SERVICE_NAME', default='easy-islanders')
OTEL_SERVICE_VERSION = config('OTEL_SERVICE_VERSION', default='1.0.0')
ENVIRONMENT = config('ENVIRONMENT', default='staging')

# Sampling Configuration
OTEL_TRACES_SAMPLER = config('OTEL_TRACES_SAMPLER', default='traceidratio')
if ENVIRONMENT == 'production':
    OTEL_TRACES_SAMPLER_ARG = config('OTEL_TRACES_SAMPLER_ARG', default='0.2')  # 20% sampling for production
else:
    OTEL_TRACES_SAMPLER_ARG = config('OTEL_TRACES_SAMPLER_ARG', default='1.0')  # 100% sampling for staging

# Error sampling (always 100%)
OTEL_ERROR_SAMPLER_ARG = config('OTEL_ERROR_SAMPLER_ARG', default='1.0')

# Enable OpenTelemetry metrics
ENABLE_OTEL_METRICS = config('ENABLE_OTEL_METRICS', default=True, cast=bool)

# LLM Metrics Configuration
LLM_METRICS_SAMPLE_RATE = float(OTEL_TRACES_SAMPLER_ARG)
LLM_METRICS_ERROR_SAMPLE_RATE = 1.0  # Always sample errors

# Structured JSON logging for assistant.* loggers
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'assistant.monitoring.logging_utils.JSONFormatter',
        },
        'simple': {
            'format': '[%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console_json': {
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'assistant': {
            'handlers': ['console_json'],
            'level': 'INFO',
            'propagate': True,
        },
        'assistant.monitoring': {
            'handlers': ['console_json'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
