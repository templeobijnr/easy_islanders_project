function TypingDots() {
  return (
    <span className="inline-flex gap-1 items-center">
      <span className="w-1.5 h-1.5 rounded-full bg-slate-400 animate-bounce [animation-delay:-0.2s]"></span>
      <span className="w-1.5 h-1.5 rounded-full bg-slate-400 animate-bounce [animation-delay:0s]"></span>
      <span className="w-1.5 h-1.5 rounded-full bg-slate-400 animate-bounce [animation-delay:0.2s]"></span>
    </span>
  );
}

// RecommendationCard using shared Card component
function RecommendationCard({ item, onUse }) {
  return (
    <Card className="w-72 shrink-0 cursor-pointer" onClick={() => onUse(item)}>
      <img
        src={item.image_urls?.[0] ? (item.image_urls[0].startsWith('http') ? item.image_urls[0] : `${config.API_BASE_URL}${item.image_urls[0]}`) : 'https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=300&h=200&fit=crop'}
        alt={item.title}
        className="w-full h-40 object-cover"
      />
      <div className="p-4">
        <h3 className="font-semibold text-slate-900 text-base truncate">{item.title}</h3>
        <div className="text-xs text-slate-600 mt-1 truncate">{item.location}</div>
        <div className="flex items-center justify-between mt-4">
          <span className="font-semibold text-slate-900 text-sm">
            {item.price ? `${item.price} ${item.currency}` : 'Price not listed'}
          </span>
          <span className="text-[11px] px-2 py-0.5 rounded-full border">‚≠ê 4.6</span>
        </div>
      </div>
    </Card>
  );
}

// Chat Header (sticky, matches prototype)
function ChatHeader() {
  return (
    <div className="px-4 pt-4 pb-2 flex items-center justify-between sticky top-0 bg-white/80 backdrop-blur rounded-t-2xl border-b border-slate-100 z-10">
      <div className="font-medium">Chat</div>
      <div className="text-xs text-slate-500">Press <kbd className="px-1 py-0.5 border rounded">/</kbd> for commands ‚Ä¢ <kbd className="px-1 py-0.5 border rounded">‚åòK</kbd> to search</div>
    </div>
  );
}

// Chat Thread (scrollable messages)
function ChatThread({ messages, typing }) {
  return (
    <div className="px-4 flex-1 overflow-auto space-y-3 max-h-[58vh]">
      {messages.map((m, i) => (
        <div key={i} className={`max-w-[85%] text-sm p-3 rounded-2xl ${m.role === "agent" ? "bg-slate-100" : "bg-lime-100 ml-auto"}`}>
          {m.content}
        </div>
      ))}
      {typing && (
        <div className="max-w-[60%] text-sm p-3 rounded-2xl bg-slate-100 inline-flex items-center gap-2">
          <TypingDots />
          <span className="text-slate-500">Thinking‚Ä¶</span>
        </div>
      )}
    </div>
  );
}

// Inline Recommendations Carousel
function InlineRecsCarousel({ items, onUse }) {
  return (
    <div className="px-4 mt-2">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">Recommended for your request</div>
      </div>
      <div className="overflow-x-auto [-ms-overflow-style:none] [scrollbar-width:none]">
        <div className="flex gap-3 min-w-max pr-2">
          {items.map((it) => (
            <RecommendationCard key={it.id} item={it} onUse={onUse} />
          ))}
        </div>
      </div>
    </div>
  );
}

// Quick Actions (dynamic based on active job)
function QuickActions({ activeJob, onPick }) {
  const actions = activeJob ? REFINERS[activeJob] : ["student arrival pack", "viewing day", "date night", "airport transfer"];
  return (
    <div className="px-4 mt-2 flex flex-wrap gap-2">
      {actions.map((r) => (
        <button key={r} onClick={() => onPick(r)} className="px-3 py-1.5 rounded-xl bg-white border border-slate-200 text-xs hover:bg-slate-50">
          {r}
        </button>
      ))}
    </div>
  );
}

// Composer (sticky bottom input)
function Composer({ value, onChange, onSend, disabled }) {
  return (
    <div className="px-4 pt-2 sticky bottom-0 bg-white/80 backdrop-blur rounded-b-2xl z-10">
      <div className="flex items-center gap-2 p-2 border-2 border-slate-200 rounded-2xl focus-within:border-lime-400 bg-white">
        <button className="px-2 py-1 text-slate-500 rounded-lg hover:bg-slate-50" title="Attach">üìé</button>
        <input
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); onSend(); } }}
          placeholder="Type details or paste a link‚Ä¶"
          className="flex-1 outline-none text-sm placeholder:text-slate-400"
        />
        <button onClick={onSend} disabled={disabled} className="px-3 py-1.5 rounded-xl bg-lime-600 text-white text-sm hover:bg-lime-700 disabled:opacity-50">
          Send
        </button>
      </div>
      <div className="text-[11px] text-slate-500 mt-1 mb-2">Tip: Try "/viewings Fri 18:00" or "/budget 2500".</div>
    </div>
  );
}

// Chat Pane (combines header + thread + inline recs + actions + composer)
function ChatPane() {
  const { activeJob } = useUi();
  const { messages, input, setInput, send, typing } = useChat();

  const recs = activeJob ? (MOCK_RESULTS[activeJob] || []) : [];
  const onRecUse = (item) => send(`Consider: ${item.title}`, "user");

  return (
    <>
      <ChatHeader />
      <ChatThread messages={messages} typing={typing} />
      {activeJob && <InlineRecsCarousel items={recs} onUse={onRecUse} />}
      <QuickActions activeJob={activeJob} onPick={(p) => setInput(p)} />
      <Composer
        value={input}
        onChange={setInput}
        onSend={() => send()}
        disabled={!input.trim()}
      />
    </>
  );
}

// Spotlight Banner (auto-rotating featured item)
function Spotlight({ activeTab, onClick }) {
  const items = SPOTLIGHT_BY_TAB[activeTab];
  const [spot, setSpot] = useState(0);

  useEffect(() => {
    const id = setInterval(() => setSpot((i) => (i + 1) % items.length), 3500);
    return () => clearInterval(id);
  }, [activeTab]);

  const spotlight = items[spot];
  return (
    <div className="mt-3 p-4 rounded-2xl border border-slate-200 bg-gradient-to-r from-lime-50 to-emerald-50 flex items-center justify-between">
      <div>
        <div className="text-sm font-semibold">{spotlight.title}</div>
        <div className="text-xs text-slate-600">{spotlight.blurb}</div>
      </div>
      <div className="text-2xl">{spotlight.emoji}</div>
    </div>
  );
}

// Featured Tabs Navigation
function FeaturedTabs({ activeTab, onTabChange }) {
  return (
    <div className="flex items-center justify-between">
      <h3 className="text-lg font-semibold">Featured for you</h3>
      <div className="flex gap-2">
        {FEATURED_TABS.map((t) => (
          <button
            key={t}
            onClick={() => onTabChange(t)}
            className={`px-3 py-1.5 rounded-2xl border text-xs ${
              activeTab === t ? "bg-lime-100 border-lime-300" : "bg-white border-slate-200"
            }`}
          >
            {t}
          </button>
        ))}
      </div>
    </div>
  );
}

// Large Card Grid (featured items)
function LargeCardGrid({ items }) {
  return (
    <div className="mt-3 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3">
      {items.map((f) => (
        <Card key={f.id} className="group text-left p-0 cursor-pointer hover:shadow-md">
          <div className="h-36 bg-slate-100 flex items-center justify-center text-slate-400">image</div>
          <div className="p-3">
            <div className="flex items-center justify-between">
              <div className="text-sm font-semibold">{f.title}</div>
              <div className="text-xs">{f.emoji}</div>
            </div>
            <div className="text-xs text-slate-600">{f.blurb}</div>
            <div className="mt-2 flex flex-wrap gap-1 text-[11px]">
              <span className="px-2 py-0.5 rounded-full border">‚≠ê 4.7</span>
              <span className="px-2 py-0.5 rounded-full border">Free cancel</span>
              <span className="px-2 py-0.5 rounded-full border">Near harbor</span>
            </div>
            <div className="mt-3 text-xs text-lime-700">Tap to ask the agent for this</div>
          </div>
        </Card>
      ))}
    </div>
  );
}

// Lane Component (horizontal scrolling sections)
function Lane({ title, items, onItemClick, viewAllText = "View all" }) {
  return (
    <div className="mt-6">
      <div className="flex items-center justify-between mb-2">
        <div className="font-medium">{title}</div>
        <button className="text-xs underline">{viewAllText}</button>
      </div>
      <div className="overflow-x-auto [-ms-overflow-style:none] [scrollbar-width:none]">
        <div className="flex gap-3 min-w-max pr-2">
          {items.map((item) => (
            <Card key={item.id} className="w-64 p-4 cursor-pointer hover:shadow" onClick={() => onItemClick(item)}>
              <div className="text-xl">{item.emoji}</div>
              <div className="text-sm font-medium mt-1">{item.title}</div>
              <div className="text-xs text-slate-600">{item.meta}</div>
              <div className="mt-2 text-xs text-lime-700">Ask to book</div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}

// Trust Strip (security badges)
function TrustStrip() {
  return (
    <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-2 text-[11px] text-slate-600">
      <div className="rounded-xl border border-slate-200 p-2">‚úÖ Protected bookings</div>
      <div className="rounded-xl border border-slate-200 p-2">üßæ Clear receipts & changes</div>
      <div className="rounded-xl border border-slate-200 p-2">ü§ù No auto-charges ‚Äî explicit confirm</div>
    </div>
  );
}

// Featured Pane (tabs + spotlight + grid + lanes + trust)
function FeaturedPane() {
  const { activeTab, setActiveTab } = useUi();
  const items = SPOTLIGHT_BY_TAB[activeTab];
  const { send } = useChat();

  const onItemClick = (item) => send(`${item.emoji} ${item.title}`, "user");
  const onLaneItemClick = (item) => send(`${item.emoji} ${item.title} ${item.meta}`, "user");

  return (
    <div className="px-4 pb-4 mt-2 max-h-[42vh] overflow-auto">
      <FeaturedTabs activeTab={activeTab} onTabChange={setActiveTab} />
      <Spotlight activeTab={activeTab} onClick={onItemClick} />
      <LargeCardGrid items={items} />
      <Lane title="Events this week" items={EVENTS} onItemClick={onLaneItemClick} />
      <Lane title="Things to do" items={TODO} onItemClick={onLaneItemClick} />
      <Lane title="Deals" items={DEALS} onItemClick={onLaneItemClick} />
      <TrustStrip />
    </div>
  );
}

// Main App Component (matches prototype exactly)
function AppContent() {
  const { activeJob, setActiveJob } = useUi();
  const { send } = useChat();

  // Handle job selection
  const handleJobSelect = (jobId) => {
    setActiveJob(jobId);
    const chip = JOB_CHIPS.find(c => c.id === jobId);
    if (chip) {
      send(`${chip.icon} ${chip.label}`, "user");
      // Simulate agent response
      setTimeout(() => {
        send(`Got it. ${chip.hint}. Here are options with reasons ‚Äî want to refine?`, "agent");
      }, 500);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-emerald-50 to-slate-50 text-slate-900 flex">
      <LeftRail onJobSelect={handleJobSelect} />
      <main className="flex-1 p-6">
        <section className="bg-white/90 backdrop-blur rounded-2xl border border-slate-200 p-0 flex flex-col w-full max-w-[1100px] mx-auto">
          <ChatPane />
          <FeaturedPane />
        </section>
      </main>
    </div>
  );
}

// Main export with providers - replaced with modular HomePage
const EasyIslanders = () => <HomePage />;

export default EasyIslanders;